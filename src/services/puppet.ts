import { ChildProcess } from 'child_process';
import { WebSocketServiceType } from '../types/websocket';
import { PuppetProcessManager } from './process-manager';
import { ProcessMessage } from '../types/process';
import { Socket } from 'socket.io';

export class Puppet {
  socket: Socket;
  serviceId: WebSocketServiceType;
  clientId: string;
  process: ChildProcess;
  state = 'pending';

  constructor(serviceId: WebSocketServiceType, clientId: string, socket: Socket, process: ChildProcess){
    this.socket = socket;
    this.serviceId = serviceId;
    this.process = process;
    this.clientId = clientId;
  }

  init(){
    this.initPuppetSocket();
    this.initPuppetProcess();
  }

  private initPuppetSocket(){
    // Verify code
    this.socket.on('verifyCode', this.onVerifyCode);
    
    this.socket.on('disconnect', () => {
      // TODO: depend on the status and notify the manager
      console.log('Socket.IO client disconnected');
    });
  }
  // Init the worker process
  private initPuppetProcess(){

    // Handle the message sent by worker process
    this.process.on('message', (message: ProcessMessage)=>{

      // Forward to client if has the collection
      if(message.type == 'authToken'){
        // The authorization token (qrCode) generated by wechaty
        // Return to the client
        this.socket?.emit('authToken', message.data);
      } else if(message.type == 'requestVerifyCode'){
        // Notify the client to input verification code
        this.socket?.emit('requestVerifyCode');
      } else if(message.type == 'verifyCodeResult'){
        // Report verify result
        console.log('verifyCodeResult:', message.data);
        // Tell the login client
        this.socket?.emit('verifyCodeResult', message.data);
        if(message.data == 'ok'){
          // Verify code passed, disable the timeout, so the puppet will serve for the customer
          PuppetService.getInstance().processManager.disableTimeout(this.clientId);
        }
      }
    });
  }

  // Client submit verification code for login
  private onVerifyCode = (verificationCode: string) => {

    this.process.send({ type: 'verifyCode', data: verificationCode });
  }
}


export class PuppetService {

  static instance: PuppetService;

  processManager = new PuppetProcessManager();
  private serviceId;
  private puppets: Map<string, Puppet> = new Map();

  static getInstance() {
    if (!PuppetService.instance) {
      PuppetService.instance = new PuppetService(WebSocketServiceType.ZionSupport);
    }
    return PuppetService.instance;
  }
  
  private constructor(serviceId: WebSocketServiceType) {
    this.serviceId = serviceId;
  }

  createPuppet(serviceId: WebSocketServiceType, clientId: string, socket: Socket) {

    // Start worker process for wechaty puppet
    const puppetWorker = this.processManager.startProcess(serviceId, clientId,
      process.env.NODE_ENV == 'production'?
      './puppet-worker.js' : './puppet-worker.ts');

    const puppet = new Puppet(serviceId, clientId, socket, puppetWorker);
    // Init the worker
    puppet.init();
    this.puppets.set(clientId, puppet);
  }
}