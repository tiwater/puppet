import { ChildProcess, fork, spawn } from 'child_process';
import path from 'path';
import { WebSocketService } from './websocket';
import { WebSocketServiceStatus, WebSocketServiceType } from '../types/websocket';
import { PuppetProcessManager } from '../utils/process-manager';
import { ProcessMessage } from '../types/process';


export class PuppetService extends WebSocketService{

  private processManager = new PuppetProcessManager();
  
  constructor(serviceId: WebSocketServiceType) {
    super(serviceId);
    
    // Handle the connection with server
    this.socket.on('connect', this.onConnect);

    // Handle a client's access request
    this.socket.on('new-client', this.onNewClient);

    // Verify code
    this.socket.on('verifyCode', this.onVerifyCode);
  }

  private onConnect = ()=>{
    console.log('Socket.IO against titan connected');
    this.socket.emit('register-puppets', this.serviceId, (result: WebSocketServiceStatus)=>{
      if(result == WebSocketServiceStatus.Connected){
        console.log('Register puppets service successfully!');
      } else {
        console.warn('Register puppets service failed!');
        // TODO: Handle the failed case

      }
    });
  }

  private onNewClient = async (serviceId: WebSocketServiceType, clientId: string) => {

    // Start worker process for wechaty puppet
    const puppetWorker = await this.processManager.startProcess(serviceId, clientId,
      process.env.NODE_ENV == 'production'?
      './puppet-worker.js' : './puppet-worker.ts');
    // Init the worker
    this.initWorker(clientId, puppetWorker);
  }

  // Client submit verification code for login
  private onVerifyCode = (clientId: string, verificationCode: string) => {

      const childProcess = this.processManager.getProcess(clientId);
      if (childProcess) {
        // Pass to the child process to verify
        childProcess.send({ type: 'verifyCode', data: verificationCode });
      }
  }

  // Init the worker process
  private initWorker(clientId: string, worker: ChildProcess){

    // Handle the message sent by worker process
    worker.on('message', (message: ProcessMessage)=>{

      if(message.type == 'authToken'){
        // The authorization token (qrCode) generated by wechaty
        // Return to the client
        this.socket.emit('authToken', clientId, message.data);
      } else if(message.type == 'requestVerifyCode'){
        // Notify the client to input verification code
        this.socket.emit('requestVerifyCode', clientId);
      } else if(message.type == 'verifyCodeResult'){
        // Report verify result
        console.log('verifyCodeResult:', message.data);
        // Tell the login client
        this.socket.emit('verifyCodeResult', clientId, message.data);
        if(message.data == 'ok'){
          // Verify code passed, disable the timeout, so the puppet will serve for the customer
          this.processManager.disableTimeout(clientId);
        }
      }
    });
  }
}